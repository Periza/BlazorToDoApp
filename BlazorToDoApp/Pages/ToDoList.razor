@page "/todolist"
@page "/"
@using DevExpress.Blazor;
@using Data.Entities;
@using Services;
@using BlazorToDoApp.Data.DTOs;
@inject NavigationManager NavManger;
@inject ToDoService _toDoService;
@inject CategoryService _categoryService;
@inject ILogger<ToDoList> Logger;


<EditForm Model="_toDoItemDTO" OnValidSubmit="AddToDoItemAsync" style="margin-top: 20px; margin-bottom:20px">
    <DataAnnotationsValidator/>
    <ValidationSummary />

    <DxFormLayout>
        <DxFormLayoutItem Caption="Title">
            <Template Context="TitleContext">
                <DxTextBox @bind-Text="_toDoItemDTO.Title"></DxTextBox>
            </Template>
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Description">
            <Template Context="DescriptionContext">
                <DxTextBox @bind-Text="_toDoItemDTO.Description"></DxTextBox>
            </Template>
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Date">
            <Template Context="DateContext">
                <DxDateEdit DateExpression="@(() => _datePart)" DateChanged="@((DateTime newValue) => UpdateDate(newValue))" Date="_datePart"></DxDateEdit>
            </Template>
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Time">
            <Template Context="TimeContext">
                <DxTimeEdit TimeExpression="@(() => _timePart)" TimeChanged="((TimeSpan newValue) => UpdateTime(newValue))" Time="_timePart" ></DxTimeEdit>
            </Template>
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Category">
            <Template Context="CategoryContext">
                <DxComboBox 
                    DataAsync="@(ct => Task.FromResult(_categories))" 
                    TData="Category" 
                    TValue="int?" 
                    @bind-Value="_toDoItemDTO.CategoryId"
                    ValueFieldName="Id"
                    TextFieldName="Name"
                ></DxComboBox>
            </Template>
        </DxFormLayoutItem>
        <DxFormLayoutItem>
            <Template Context="SubmitContext">
                @if (editingToDoItemId is null)
                {
                    <DxButton SubmitFormOnClick="true" Text="Submit" />
                } else
                {
                    <DxButton Click="@(async () => await UpdateToDoItemAsync())" Text="Save" />
                    <DxButton Click="@(() => CancelEdit())" Context="buttonCtx">Cancel</DxButton>
                }
            </Template>
        </DxFormLayoutItem>
    </DxFormLayout>
</EditForm>

<div>

   <label style="margin-right: 10px">Filter by category: </label>

    <DxComboBox 
        DataAsync="@(ct => Task.FromResult(_categories))" 
        TData="Category" 
        TValue="int?" 
        ValueFieldName="Id"
        TextFieldName="Name"
        ValueChanged="@(async (int? newValue) => await FilterByCategoryAsync(newValue))"
        NullText="All Categories"
    ></DxComboBox>
</div>

<DxGrid Data="@_toDoItems" ShowSearchBox="true" ShowFilterRow="true" style="margin-top: 20px">
    <Columns>
        <DxGridDataColumn FieldName="Title"></DxGridDataColumn>
        <DxGridDataColumn FieldName="Description"></DxGridDataColumn>
        <DxGridDataColumn FieldName="Category.Name" Caption="Category" FilterRowEditorVisible="false"></DxGridDataColumn>
        <DxGridDataColumn FieldName="DateTime" SearchEnabled="false" ></DxGridDataColumn>
        <DxGridDataColumn FieldName="Complete">
            <CellDisplayTemplate Context="checkContext">
                <DxCheckBox Checked="@((bool)(checkContext.DataItem as ToDoItem)?.Complete)" CheckedChanged="@((bool newValue) => UpdateCompleteAsync(checkContext.DataItem as ToDoItem, newValue))"></DxCheckBox>
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn SearchEnabled="false" FilterRowEditorVisible="false">
            <CellDisplayTemplate Context="buttonContext">
                <DxButton Click="@(async () => await DeleteButtonClickAsync(buttonContext.DataItem as ToDoItem))" Enabled="@(editingToDoItemId is null)">Delete</DxButton>
                <DxButton Click="@(() => EditButtonClick(buttonContext.DataItem as ToDoItem))">Edit</DxButton>
            </CellDisplayTemplate>
        </DxGridDataColumn>
    </Columns>
</DxGrid>





@code {
    private IEnumerable<ToDoItem> _toDoItems { get; set; }
    private IEnumerable<Category> _categories { get; set; }
    private ToDoItemDTO _toDoItemDTO = new ToDoItemDTO();

    private int? _selectedCategoryId = null;

    private int? editingToDoItemId = null;

    private DateTime _datePart = DateTime.Today;
    private TimeSpan _timePart = new TimeSpan(12, 0, 0);


    private async Task FilterByCategoryAsync(int? categoryId)
    {

        _selectedCategoryId = categoryId;
        if (categoryId.HasValue)
        {
            _toDoItems = (await _toDoService.GetToDosByCategoryAsync(categoryId.Value)).ToList();
        }
        else
        {
            _toDoItems = (await _toDoService.getAllToDosAsync()).ToList();
        }


    }
    protected override async Task OnInitializedAsync()
    {
        await RefreshToDoItemsAndCategoriesAsync();
    }

    private void UpdateDate(DateTime newDate)
    {
        _datePart = newDate.Date;
        _toDoItemDTO.DateTime = _datePart.Add(_timePart);
    }

    private void UpdateTime(TimeSpan newTime)
    {
        _timePart = newTime;
        _toDoItemDTO.DateTime = _datePart.Add(_timePart);
    }

    private async Task AddToDoItemAsync(EditContext context)
    {

        _toDoItemDTO.DateTime = _datePart.Add(_timePart);

        await _toDoService.AddNewToDoItemAsync(_toDoItemDTO);

        ResetInputs();

        await RefreshToDoItemsAndCategoriesAsync();
    }

    private async Task RefreshToDoItemsAndCategoriesAsync()
    {
        // You can use your existing logic for fetching data based on selected category
        if (_selectedCategoryId.HasValue)
        {
            _toDoItems = (await _toDoService.GetToDosByCategoryAsync(_selectedCategoryId.Value)).ToList();
        }
        else
        {
            _toDoItems = (await _toDoService.getAllToDosAsync()).ToList();
        }

        _categories = (await _categoryService.getAllCategoriesAsync()).ToList();
    }

    private async Task DeleteButtonClickAsync(ToDoItem toDoItem)
    {
        await _toDoService.DeleteToDoItemAsync(toDoItem.Id);
        await RefreshToDoItemsAndCategoriesAsync();
        StateHasChanged();
    }

    private async Task UpdateCompleteAsync(ToDoItem toDoItem, bool newValue)
    {
        await _toDoService.setCheckedAsync(toDoItem.Id, newValue);
        await RefreshToDoItemsAndCategoriesAsync();
    }

    private void EditButtonClick(ToDoItem toDoItem)
    {
        editingToDoItemId = toDoItem.Id;

        _toDoItemDTO.Title = toDoItem.Title;
        _toDoItemDTO.Description = toDoItem.Description;
        _datePart = toDoItem.DateTime;
        _timePart = toDoItem.DateTime.TimeOfDay;
        _toDoItemDTO.Complete = toDoItem.Complete;
        _toDoItemDTO.DateTime = _datePart.Add(_timePart);
        _toDoItemDTO.CategoryId = toDoItem.Category.Id;

    }

    private async Task UpdateToDoItemAsync()
    {

        if(editingToDoItemId is not null)
            await _toDoService.UpdateToDoItemAsync((int)editingToDoItemId, _toDoItemDTO);

        editingToDoItemId = null;
        await RefreshToDoItemsAndCategoriesAsync();
        ResetInputs();
    }

    private void CancelEdit()
    {
        editingToDoItemId = null;
        ResetInputs();
    }

    private void ResetInputs()
    {
        _toDoItemDTO.Title = string.Empty;
        _toDoItemDTO.Description = string.Empty;
        _datePart = DateTime.Today;
        _timePart = new TimeSpan(12, 0, 0);
        _toDoItemDTO.DateTime = _datePart.Add(_timePart);
    }





}
